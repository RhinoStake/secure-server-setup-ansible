---
- name: Update peers in config.toml
  when: peers is defined
  ansible.builtin.lineinfile:
    path: "{{ user_dir }}/{{ folder }}/config/config.toml"
    regexp: "^{{ item }} ="
    line: '{{ item }} = "{{ peers }}"'
    state: present
    backrefs: true
  loop:
    - persistent_peers
    - persistent-peers

- name: Update seeds in config.toml
  when: seeds is defined
  ansible.builtin.lineinfile:
    path: "{{ user_dir }}/{{ folder }}/config/config.toml"
    regexp: "^{{ item }} ="
    line: '{{ item }} = "{{ seeds }}"'
    state: present
    backrefs: true
  loop:
    - seeds
    - bootstrap-peers

- name: Update unconditionals in config.toml
  when: unconditional_nodeids is defined
  ansible.builtin.lineinfile:
    path: "{{ user_dir }}/{{ folder }}/config/config.toml"
    regexp: "^{{ item }} ="
    line: '{{ item }} = "{{ unconditional_nodeids }}"'
    state: present
    backrefs: true
  loop:
    - unconditional_peer_ids
    - unconditional-peer-ids

- name: Copy binary into cosmovisor directory
  ansible.builtin.copy:
    src: "{{ user_dir }}/go/bin/{{ daemon }}"
    dest: "{{ user_dir }}/{{ folder }}/cosmovisor/genesis/bin"
    remote_src: true
    mode: "0755"

# Check to see if upgrade folder variable is defined and create that directory as well
- name: Create upgrade directories in Cosmovisor folder
  when: upgrade_name is defined
  block:
    - name: Create appropriate folder
      ansible.builtin.file:
        path: "{{ user_dir }}/{{ folder }}/cosmovisor/upgrades/{{ upgrade_name }}/bin"
        state: directory
        mode: "0755"

    - name: Copy binary into cosmovisor upgrade directory
      ansible.builtin.copy:
        src: "{{ user_dir }}/go/bin/{{ daemon }}"
        dest: "{{ user_dir }}/{{ folder }}/cosmovisor/upgrades/{{ upgrade_name }}/bin"
        remote_src: true
        mode: "0755"

- name: Create state_sync directory
  ansible.builtin.file:
    path: "{{ user_dir }}/state_sync"
    state: directory
    mode: "0755"
  when: snap_rpc is defined

- name: Copy state_sync file
  ansible.builtin.template:
    src: "state_sync.sh.j2"
    dest: "{{ user_dir }}/state_sync/state_sync_{{ network }}.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0700"
  when:
    - snap_rpc is defined
    - p2p_state_sync is undefined

- name: Copy state_sync file for p2p sync
  ansible.builtin.template:
    src: "state_sync-p2p.sh.j2"
    dest: "{{ user_dir }}/state_sync/state_sync_{{ network }}.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0700"
  when:
    - snap_rpc is defined
    - p2p_state_sync is defined

  # Add Consensus Tool
- name: Add Consensus tool
  ansible.builtin.git:
    repo: https://github.com/Northa/consensus.git
    dest: /home/{{ ansible_user }}/source/consensus
    single_branch: true
    force: true
    version: main

- name: Add pvtop repository
  ansible.builtin.git:
    repo: https://github.com/blockpane/pvtop.git
    dest: /home/{{ ansible_user }}/source/pvtop
    single_branch: true
    force: true
    version: main

- name: Install pvtop
  ansible.builtin.command: "{{ item }}"
  args:
    chdir: "{{ user_dir }}/source/pvtop"
  with_items:
    - "go install ./..."
  environment:
    PATH: "{{ path }}"
    GOPATH: "{{ user_dir }}/go"

- name: Add Cosmprund repository
  ansible.builtin.git:
    repo: https://github.com/binaryholdings/cosmprund.git
    dest: /home/{{ ansible_user }}/source/cosmprund
    single_branch: true
    force: true
    version: "{{ cosmprund_version }}"

- name: Build cosmprund
  ansible.builtin.command: "{{ item }}"
  args:
    chdir: "{{ user_dir }}/source/cosmprund"
  with_items:
    - "make build"
  environment:
    PATH: "{{ path }}"
    GOPATH: "{{ user_dir }}/go"

- name: Copy cosmprund to directory
  ansible.builtin.copy:
    src: "{{ user_dir }}/source/cosmprund/build/cosmprund"
    dest: "{{ user_dir }}/go/bin/cosmprund"
    remote_src: true
    mode: "0755"
