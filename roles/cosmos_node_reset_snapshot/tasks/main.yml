---
# For now this uses Polkachu's snapshot urls.  This will eventually need to be replaced
- name: Set URLs for retrieving items
  ansible.builtin.set_fact:
    snapshot_url: "{{ snapshot_url }}/{{ network }}"
    addrbook_url: "{{ addrbook_url }}/{{ network }}/addrbook.json"

- name: Parse snapshot url
  ansible.builtin.shell: 'curl -s {{ snapshot_url }} | grep ''<a href="https://snapshots'' | grep -Eo ''https.*tar.lz4'' | head -1'
  environment:
    PATH: "{{ path }}"
  register: snapshot_url

- name: Print snapshot_url
  ansible.builtin.debug:
    msg: "Downloading snapshot {{ snapshot_url.stdout }}"

- name: Fail if snapshot_url not defined
  ansible.builtin.fail:
    msg: snapshot_url is not available
  when: snapshot_url.stdout == None

- name: Download snapshot
  ansible.builtin.shell: "aria2c -x10 -d {{ user_dir }} -o {{ network }}-snapshot.tar.lz4 {{ snapshot_url.stdout }}"
  environment:
    PATH: "{{ path }}"

- name: Download addrbook
  ansible.builtin.get_url:
    url: "{{ addrbook_url }}"
    dest: "{{ user_dir }}/{{ folder }}/config/addrbook.json"
    mode: "0440"
  register: url_correct

- name: Stop cosmovisor
  become: true
  ansible.builtin.systemd:
    name: "{{ daemon }}"
    state: stopped

- name: Pause for 5 seconds
  ansible.builtin.pause:
    seconds: 5

- name: Reset data folder
  ansible.builtin.command: "{{ daemon }} tendermint unsafe-reset-all --home {{ user_dir }}/{{ folder }} --keep-addr-book"
  environment:
    PATH: "{{ path }}"

- name: Extract archive
  ansible.builtin.shell: "lz4 -c -d {{ user_dir }}/{{ network }}-snapshot.tar.lz4 | tar -x -C {{ user_dir }}/{{ folder }}"
  environment:
    PATH: "{{ path }}"

- name: Start cosmovisor
  become: true
  ansible.builtin.systemd:
    name: "{{ daemon }}"
    state: restarted

- name: Cleanup snapshot archive
  ansible.builtin.file:
    path: "{{ user_dir }}/{{ network }}-snapshot.tar.lz4"
    state: absent
