---
# - name: Set URLs for retrieving items
#   ansible.builtin.set_fact:
#     snapshotpage_url: "{{ snapshot_url }}/{{ network }}"

# - name: Parse Snapshot URL
#   delegate_to: localhost
#   when: snapshot_url is not defined
#   block:
#     - name: Parse snapshot url from snapshot
#       ansible.builtin.shell: 'curl -s {{ snapshotpage_url }} | grep ''<a href="https://snapshots'' | grep -Eo ''https.*tar.lz4'' | head -1'
#       environment:
#         PATH: "{{ path }}"
#       register: snapshot_url_raw

#     - name: Set fact
#       ansible.builtin.set_fact:
#         snapshot_url: "{{ snapshot_url_raw.stdout }}"

- name: Find public snapshot if not explicitly set
  when: snapshot_url is not defined
  block:
    - name: See if RHINO snapshot exists
      ansible.builtin.uri:
        url: "https://snapshots.rhinostake.com/{{ network }}/latest.tar.lz4"
        method: GET
        status_code: 200
        return_content: false
      ignore_errors: true
      register: rhino_snapshot_exists

    - name: See if public snapshot exists
      ansible.builtin.uri:
        url: "{{ snapshotpage_url }}/{{ network }}/latest.tar.lz4"
        method: GET
        status_code: 200
        return_content: false
      ignore_errors: true
      register: public_snapshot_exists

    - name: Set snapshot_url
      when: (public_snapshot_exists.status == 200) or (rhino_snapshot_exists.status == 200)
      ansible.builtin.set_fact:
        snapshot_url: "{% if rhino_snapshot_exists.status == 200 %}https://snapshots.rhinostake.com/{{ network }}/latest.tar.lz4{% elif public_snapshot_exists.status == 200 %}{{ snapshotpage_url }}/{{ network }}/latest.tar.lz4{% endif %}"

- name: Fail if snapshot_url not defined
  ansible.builtin.fail:
    msg: snapshot_url is not set or available
  when: (snapshot_url is undefined) or (snapshot_url == None)

- name: Print snapshot_url
  ansible.builtin.debug:
    msg: "Downloading snapshot {{ snapshot_url }}"

- name: Set snapshot_name fact
  ansible.builtin.set_fact:
    snapshot_name: "{{ snapshot_url | basename }}"

- name: Download snapshot
  ansible.builtin.command:
    cmd: "/usr/bin/aria2c -x10 -s10 -c -d {{ user_dir }} -o {{ snapshot_name }} {{ snapshot_url }}"

- name: Stop cosmovisor
  become: true
  ansible.builtin.systemd:
    name: "{{ daemon }}"
    state: stopped

- name: Pause for 5 seconds
  ansible.builtin.pause:
    seconds: 5

- name: Save the state file
  ansible.builtin.copy:
    src: "{{ user_dir }}/{{ folder }}/data/priv_validator_state.json"
    dest: "{{ user_dir }}/{{ chain_id }}_priv_validator_state.json"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0600"
    remote_src: true
    force: true

- name: Remove and create data folder
  ansible.builtin.file:
    path: "{{ user_dir }}/{{ folder }}/data"
    state: "{{ item }}"
    mode: "0755"
  with_items:
    - absent
    - directory

- name: Extract snapshot archive
  ansible.builtin.unarchive:
    src: "{{ user_dir }}/{{ snapshot_name }}"
    dest: "{{ user_dir }}/{{ folder }}"
    remote_src: true

- name: Force delete the priv_validator_state file if exists in archive
  ansible.builtin.file:
    path: "{{ user_dir }}/{{ folder }}/data/priv_validator_state.json"
    state: absent

- name: Replace the state file with saved version
  ansible.builtin.copy:
    src: "{{ user_dir }}/{{ chain_id }}_priv_validator_state.json"
    dest: "{{ user_dir }}/{{ folder }}/data/priv_validator_state.json"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0600"
    remote_src: true
    force: true

- name: Ensure state-sync is disabled
  community.general.ini_file:
    path: "{{ user_dir }}/{{ folder }}/config/config.toml"
    section: statesync
    option: "enable"
    value: "false"
    create: false

- name: Start cosmovisor
  become: true
  ansible.builtin.systemd:
    name: "{{ daemon }}"
    state: restarted

- name: Cleanup temporary files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ user_dir }}/{{ snapshot_name }}"
    - "{{ user_dir }}/{{ chain_id }}_priv_validator_state.json"
