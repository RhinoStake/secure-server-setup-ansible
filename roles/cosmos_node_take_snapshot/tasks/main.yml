- name: Identify /home mount point
  ansible.builtin.set_fact:
    mount_point: "{{ '/home' if ansible_mounts | selectattr('mount', 'equalto', '/home') | list | length > 0 else '/' }}"

- name: Check current data directory size in bytes
  ansible.builtin.command: "du -sb {{ user_dir }}/{{ folder }}/data"
  register: chain_data_size_raw

- name: Set directory size fact
  ansible.builtin.set_fact:
    chain_data_size: "{{ chain_data_size_raw.stdout.split()[0] }}"

- name: Set free space size fact in bytes
  ansible.builtin.set_fact:
    free_space: "{{ ansible_mounts | selectattr('mount', 'equalto', mount_point) | map(attribute='size_available') | list | first }}"

- name: Chain data statistics
  ansible.builtin.debug:
    msg:
      - "{{ ansible_hostname }}:"
      - "Size of {{ folder }}/data: {{ chain_data_size | float | human_readable }}"
      - "Free space on {{ mount_point }}: {{ free_space | float | human_readable }}"
      - ""

- name: Ensure data directory is not larger than available space
  ansible.builtin.fail:
    msg: "Data directory is too large for snapshot creation."
  when: (chain_data_size | float) >= ((free_space | float) * 0.9)

- name: Ensure data directory is not too large
  ansible.builtin.prompt:
    msg: "Snapshot is greater than 100GB. Continue?"
  when: (chain_data_size | float) >= 107374182400 # 100GB

- name: Check for mc
  ansible.builtin.include_role:
    name: setup
    tasks_from: install_mc

- name: Check for cosmprund
  ansible.builtin.stat:
    path: "{{ user_dir }}/go/bin/cosmprund"
  register: cosmprund

- name: Install cosmprund
  when: not cosmprund.stat.exists
  block:
    - name: Add cosmprund repository
      ansible.builtin.git:
        repo: https://github.com/binaryholdings/cosmprund.git
        dest: "{{ user_dir }}/source/cosmprund"
        single_branch: true
        force: true
        version: "{{ cosmprund_version }}"
      register: cosmprund_repo

    - name: Build & install cosmprund
      when: cosmprund_repo.changed
      block:
        - name: Build cosmprund
          ansible.builtin.command: "make build"
          args:
            chdir: "{{ user_dir }}/source/cosmprund"
          environment:
            PATH: "{{ path }}"
            GOPATH: "{{ user_dir }}/go"

        - name: Copy cosmprund to directory
          ansible.builtin.copy:
            src: "{{ user_dir }}/source/cosmprund/build/cosmprund"
            dest: "{{ user_dir }}/go/bin/cosmprund"
            remote_src: true
            mode: "0755"

- name: Get current block height
  ansible.builtin.shell: "set -o pipefail && curl -sL http://localhost:{{ custom_port_prefix }}57/status | jq -r {% if tendermint_config_version is undefined %}.result{% elif tendermint_config_version == 37 %}{% endif %}.sync_info.latest_block_height"
  args:
    executable: /usr/bin/bash
  register: currentheight
  ignore_errors: true

- name: Double check we want to continue
  when: currentheight is undefined or currentheight.stdout == "null"
  block:
    - name: Pause
      ansible.builtin.pause:
        prompt: "Current height is undefined.  Are you sure you want to take a snapshot?"
        echo: true

    - name: Set fact
      ansible.builtin.set_fact:
        currentheight: "unknown"

- name: Stop cosmovisor
  become: true
  ansible.builtin.systemd:
    name: "{{ daemon }}"
    state: stopped

- name: Pause for 5 seconds
  ansible.builtin.pause:
    seconds: 5

- name: Run cosmprund
  ignore_errors: true
  ansible.builtin.command:
    cmd: "{{ user_dir }}/go/bin/cosmprund prune {{ user_dir }}/{{ folder }}/data --cosmos-sdk=false"
    chdir: "{{ user_dir }}"
  environment:
    PATH: "{{ path }}"
  register: cosmprund_output

- name: Display cosmprund cosmprund
  when: cosmprund_output.failed == true
  ansible.builtin.debug:
    msg:
      - "Cosmprund Output:"
      - "{{ cosmprund_output.stdout_lines }}"

- name: Check for external wasm
  ansible.builtin.stat:
    path: "{{ user_dir }}/{{ folder }}/wasm"
  register: wasm_outside

- name: Check for internal wasm
  ansible.builtin.stat:
    path: "{{ user_dir }}/{{ folder }}/data/wasm"
  register: wasm_inside

- name: Set fact
  ansible.builtin.set_fact:
    snapshot_filename: "{{ network }}-snapshot.{{ currentheight.stdout | default('STALLED') }}.tar.lz4"

- name: Create archive - external wasm
  when: wasm_outside.stat.exists
  ansible.builtin.shell:
    cmd: "tar --exclude=data/priv_validator_state.json --exclude=wasm/wasm/cache -cf - data wasm | lz4 > {{ user_dir }}/{{ snapshot_filename }}"
    chdir: "{{ user_dir }}/{{ folder }}"
  environment:
    PATH: "{{ path }}"

- name: Create archive - internal wasm
  when: wasm_inside.stat.exists
  ansible.builtin.shell:
    cmd: "tar --exclude=data/priv_validator_state.json --exclude=data/wasm/wasm/cache -cf - data | lz4 > {{ user_dir }}/{{ snapshot_filename }}"
    chdir: "{{ user_dir }}/{{ folder }}"
  environment:
    PATH: "{{ path }}"

- name: Create archive - no wasm
  when: not wasm_inside.stat.exists and not wasm_outside.stat.exists
  ansible.builtin.shell:
    cmd: "tar --exclude=data/priv_validator_state.json -cf - data | lz4 > {{ user_dir }}/{{ snapshot_filename }}"
    chdir: "{{ user_dir }}/{{ folder }}"
  environment:
    PATH: "{{ path }}"

- name: Start cosmovisor
  become: true
  ansible.builtin.systemd:
    name: "{{ daemon }}"
    state: restarted

- name: Set bucket name
  ansible.builtin.set_fact:
    bucket_name: "{% if 'Testnet' in group_names %}testnet-{% endif %}{{ network }}"

- name: Prep snapshots bucket
  ansible.builtin.command:
    cmd: "{{ item }}"
    chdir: "{{ user_dir }}"
  environment:
    PATH: "{{ path }}"
  loop:
    - "mc mb --ignore-existing snapshots/{{ bucket_name }}" # Create bucket
    - "mc anonymous set download snapshots/{{ bucket_name }}" # Set download policy to anonymous
    - 'mc tag set snapshots/{{ bucket_name }} "public_snapshots=true"' # Set tag so bucket is listed in public json
    - 'mc ilm rule add snapshots/{{ bucket_name }} --expire-days "14"' # Set ILM rule to expire Cosmos snapshots after 14 days

- name: Copy file to snapshots server
  ansible.builtin.command:
    cmd: "mc cp {{ snapshot_filename }} snapshots/{{ bucket_name }}/{{ snapshot_filename }}"
    chdir: "{{ user_dir }}"
  environment:
    PATH: "{{ path }}"

- name: Cleanup temporary files
  ansible.builtin.file:
    path: "{{ user_dir }}/{{ snapshot_filename }}"
    state: absent

- name: Print path
  ansible.builtin.debug:
    msg: "Snapshot uploaded to: {{ mc_url }}/{{ bucket_name }}/{{ snapshot_filename }}"
